fidnl Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)
AM_CONFIG_HEADER(include/paraconfig_gnu.h:include/paraconfig_gnu.h.in)

TOP_BUILDDIR=`pwd`

AC_SUBST(TOP_BUILDDIR)

dnl The minimum SDL version required
SDL_VERSION=1.2.0
dnl Set various version strings - taken gratefully from the GTk sources

# Making releases:
#   MICRO_VERSION += 1;
#   INTERFACE_AGE += 1;
#   BINARY_AGE += 1;
# if any functions have been added, set INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set BINARY_AGE and INTERFACE_AGE to 0.

PARAGUI_MAJOR_VERSION=1
PARAGUI_MINOR_VERSION=0
PARAGUI_MICRO_VERSION=2
PARAGUI_INTERFACE_AGE=0
PARAGUI_BINARY_AGE=2
PARAGUI_VERSION=$PARAGUI_MAJOR_VERSION.$PARAGUI_MINOR_VERSION.$PARAGUI_MICRO_VERSION

AC_SUBST(PARAGUI_MAJOR_VERSION)
AC_SUBST(PARAGUI_MINOR_VERSION)
AC_SUBST(PARAGUI_MICRO_VERSION)
AC_SUBST(PARAGUI_INTERFACE_AGE)
AC_SUBST(PARAGUI_BINARY_AGE)
AC_SUBST(PARAGUI_VERSION)

# libtool versioning
LT_RELEASE=$PARAGUI_MAJOR_VERSION.$PARAGUI_MINOR_VERSION
LT_CURRENT=`expr $PARAGUI_MICRO_VERSION - $PARAGUI_INTERFACE_AGE`
LT_REVISION=$PARAGUI_INTERFACE_AGE
LT_AGE=`expr $PARAGUI_BINARY_AGE - $PARAGUI_INTERFACE_AGE`

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

dnl Detect the canonical host and target build environment
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl Setup for automake
AM_INIT_AUTOMAKE(paragui, $PARAGUI_VERSION)

dnl Check for tools

AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_CXX
AC_PROG_CPP
AC_PROG_INSTALL
AC_EXEEXT

if test "$prefix" = "NONE"; then
  prefix="/usr/local"
fi
LIBS="-L$prefix/lib $LIBS"

dnl Check for zip (needed to pack themes and VC++ workspace)
dnl I deactivated this because it isn't needed for compiling
dnl It's just needed for packaging (that won't do a user)

dnl AC_CHECK_PROG(have_zip, zip, yes, no)
dnl if test x$have_zip = xno; then
dnl     AC_MSG_ERROR([*** Unable to find zip tool !])
dnl fi


dnl Add verbose warnings by default, and allow ANSI compliance checking
AC_ARG_ENABLE(strict-ansi,
[  --enable-strict-ansi    Enable strict ANSI compliance build [default=no]],
              , enable_strict_ansi=no)
if test x$ac_cv_prog_gcc = xyes; then
    CFLAGS="$CFLAGS -Wall"
    if test x$enable_strict_ansi = xyes; then
        CFLAGS="$CFLAGS -ansi -pedantic"
    fi
fi


dnl enable mpatrol mem profiler
mpatrol=yes
AC_ARG_ENABLE(mpatrol,
[  --enable-mpatrol        Enable mpatrol mem profiler [default=no]],
              , mpatrol=no)
if test x$mpatrol = xyes; then
    have_mpatrol_lib=no
    have_mpatrol_include=no

dnl    have_iberty=no
dnl    AC_CHECK_LIB(iberty, buildargv, have_iberty=yes)

dnl    if test x$have_iberty = xno; then
dnl	AC_MSG_ERROR([*** Unable to find iberty library! (needed for mpatrol)])
dnl    fi

    AC_CHECK_LIB(mpatrol, malloc, have_mpatrol_lib=yes, , -lbfd -liberty)

    if test x$have_mpatrol_lib = xno; then
	AC_MSG_ERROR([*** Unable to find mpatrol library! (http://www.cbmamiga.demon.co.uk/mpatrol)])
    fi

    AC_CHECK_HEADER(mpatrol.h, [have_mpatrol_include=yes])

    if test x$have_mpatrol_include = xno; then
	AC_MSG_ERROR([*** Unable to find mpatrol header! (http://www.cbmamiga.demon.co.uk/mpatrol)])
    fi

    AC_DEFINE(MPATROL_ENABLED)
    EXTRA_LIBS="$EXTRA_LIBS -lmpatrol -lbfd -liberty"
fi


AC_ARG_WITH(stlport,[  --with-stlport=DIR      use the STLPort library installed with this prefix directory [default $prefix]],
            STLPORTPREFIX="$withval", STLPORTPREFIX="no")
AC_ARG_WITH(stlportlib,[  --with-stlportlib=NAME  use the specified STLPort library name for linking [autodetect]],
	    STLPORTLIB="$withval", STLPORTLIB="")
AC_ARG_ENABLE(stlport-debug,[  --enable-stlport-debug   Enable the debug mode version of the STLPort library [default no]],
              enable_stlport_debug=yes)
AC_ARG_WITH(libstdcpp,[  --with-libstdcpp=NAME   library to be used as -lNAME instead of stdc++],
            LIBSTDCPP="-l$withval", LIBSTDCPP="-lstdc++")
	    
CROSSCOMPILE=NO
PHYSFS_PLATFORMFILE=platform/unix.c

dnl The alpha architecture needs special flags for binary portability

case "$target" in
    *-*-cygwin* | *-*-mingw32*)
	dnl AM_INIT_AUTOMAKE(xmingw32msvc-paragui, $PARAGUI_VERSION)
        if test "$build" != "$target"; then # cross-compiling
            # Default cross-compile location
            ac_default_prefix=/usr/local/cross-tools/i386-mingw32msvc
        else
            # Look for the location of the tools and install there
            ac_default_prefix=$BUILD_PREFIX
        fi
	CROSSCOMPILE=YES
	PHYSFS_PLATFORMFILE=platform/win32.c
	;;
    *-*-darwin*)
	PHYSFS_PLATFORMFILE=platform/unix.c
	;;
    *-*-freebsd*)
	PHYSFS_PLATFORMFILE=platform/unix_nocdrom.c
	;;
    *-*-irix*)
	PHYSFS_PLATFORMFILE=platform/unix_nocdrom.c
	;;
    *-*-solaris*)
	PHYSFS_PLATFORMFILE=platform/unix_nocdrom.c
	;;
    alpha*-*-linux*)
        CFLAGS="$CFLAGS -mcpu=ev4 -Wa,-mall"
        ;;
    *-*-beos*)
	ac_default_prefix=/boot/develop/tools/gnupro
	LIBSTDCPP="-lstdc++.r4"
	PHYSFS_PLATFORMFILE=platform/beos.c
        ;;
esac  

AC_SUBST(PHYSFS_PLATFORMFILE)

AC_MSG_CHECKING(for the STL library to use)
if test "$STLPORTPREFIX" != "no"; then
    if test -z "$STLPORTPREFIX" -o "$STLPORTPREFIX" = "yes"; then
        STLPORTPREFIX="$prefix"
    fi
    INCSTLPORT="$STLPORTPREFIX/include/stlport"
    LIBSTLPORT="$STLPORTPREFIX/lib"
    dnl config/stlcomp.h is specific for STLPort
    if test -f $INCSTLPORT/config/stlcomp.h; then
	CPPFLAGS="-I$INCSTLPORT $CPPFLAGS"
	STL_CFLAGS="-I$INCSTLPORT"
	
	dnl detecting what stlport library to use is tricky since
	dnl it uses a weird naming scheme by appending the compiler
	dnl and system dependent suffix (plus, for the debug version,
	dnl an additional 'stldebug' suffix). We will use some
	dnl heuristics and common sense here. Including explicit name
	dnl tests here would be too cumbersome and not flexible.
	dnl Should those tests fail to detect the library, specify it
	dnl explicitly with the --with-stlportlib=NAME parameter.
	if test -n "$STLPORTLIB"; then
	    LIBSTDCPP="-l$STLPORTLIB"
	else
	    if test -f "$LIBSTLPORT/libstlport.so"; then
		LIBSTDCPP="-lstlport"
	    else
		USESTLLIB=""
		for l in "$LIBSTLPORT/libstlport*.so"; do
		    if test -n "$USESTLLIB"; then
			continue
		    fi
		    LIBNAME="`echo $l | tr '_.' '  '`"
		    LIBSUFFIX=`echo $LIBNAME | cut -d ' ' -f 2`
		    LIBTYPE=`echo $LIBNAME | cut -d ' ' -f 3`
    
		    if test "$LIBTYPE" = "stldebug" -a "$enable_stlport_debug" != "no"; then
			USESTLLIB="-lstlport_${LIBSUFFIX}_stldebug"
		    elif test "$LIBTYPE" = "so" -a -z "$enable_stlport_debug"; then
			USESTLLIB="-lstlport_$LIBSUFFIX"
		    fi
    		done
		if test -n "$USESTLLIB"; then
		    LIBSTDCPP="-L$LIBSTLPORT $USESTLLIB"
		fi
	    fi
	fi
    fi
fi
AC_MSG_RESULT($LIBSTDCPP)

AC_ARG_WITH(libstdcppstatic,[  --with-libstdcppstatic=NAME   link NAME statically as stdc++],
            LIBSTDCPP="$withval")

AC_SUBST(LIBSTDCPP)

dnl Check for SDL

AM_PATH_SDL($SDL_VERSION,
            :,
	    AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

dnl SDL_LIBS=`sdl-config --libs`
dnl AC_SUBST(SDL_LIBS)

dnl set default prefix to `sdl-config --prefix`

ac_default_prefix=`sdl-config --prefix`
SDL_PREFIX=`sdl-config --prefix`

AC_SUBST(SDL_PREFIX)

ft2test=yes
AC_ARG_ENABLE(ft2test,
	[  --disable-ft2test       disable the freetype check],
	ft2test=no
)

if test "$ft2test" = "yes"; then

    dnl Check for freetype2 with a reasonable fallback in case
    dnl freetype-config is missing.

    have_freetype=no
    AC_PATH_PROG(freetype_config,freetype-config,no)
    if test "$ac_cv_path_freetype_config" != "no"; then
    	have_freetype=yes
	FREETYPE_CFLAGS="`$ac_cv_path_freetype_config --cflags`"
	FREETYPE_LIBS="`$ac_cv_path_freetype_config --libs`"
    else
	AC_CHECK_LIB(freetype,FT_Init_FreeType,have_freetype=yes)
	AC_CHECK_HEADER(ft2build.h,have_ft2build=yes)
	if test "$have_ft2build" != "yes"; then
	    have_freetype="no"
	elif test "$have_freetype" = "yes"; then
	    FREETYPE_LIBS="-lfreetype"
	    ft2inc="no"
	    AC_MSG_CHECKING(freetype2 include directory)
	    if test -d /usr/local/include/freetype2; then
		ft2inc="/usr/local/include/freetype2"
	    elif test -d /usr/include/freetype2; then
		ft2inc="/usr/include/freetype2"
	    fi
	    AC_MSG_RESULT($ft2inc)
	    FREETYPE_CFLAGS="-I$ft2inc"
	fi
    fi

    if test x$have_freetype = xno; then
	AC_MSG_ERROR([*** Unable to find the FreeType 2 library (http://www.freetype.org/)])
    fi
    
fi

CFLAGS="$CFLAGS $FREETYPE_CFLAGS"

dnl Check for expat

EXPAT_INCLUDE=""
EXPAT_LIB="-lexpat"
EXPAT_SUBDIR=""
LIBEXPAT="-lexpat"

internalexpat=no
AC_ARG_ENABLE(internalexpat,
	[  --enable-internalexpat  enable internal expat version],
	internalexpat=yes
)

if test x$internalexpat = xno; then

    have_expat_lib=no
    have_expat_include=no

    AC_CHECK_HEADER(expat.h, [have_expat_include=yes])

    if test x$have_expat_include = xno; then
    	    AC_MSG_ERROR(
		[*** Unable to find expat header file! (http://expat.sourceforge.net)]
		[Please install the library and header files if you want to link to the shared library,]
		[or run './configure --enable-internalexpat' to compile an internal version of expat.] 
		)
    fi

    AC_CHECK_LIB(expat, XML_ParserCreate, have_expat_lib=yes)

    if test x$have_expat_lib = xno; then
	AC_MSG_ERROR(
	    [*** Unable to find expat xml library! (http://expat.sourceforge.net)]
	    [Please install the library and header files if you want to link to the shared library,]
	    [or run './configure --enable-internalexpat' to compile an internal version of expat.] 
	    )
    fi
else
    EXPAT_INCLUDE="-I\$(srcdir)/../expat"
    EXPAT_LIB="./expat/libexpat.la"
    EXPAT_SUBDIR="expat"
    LIBEXPAT=""
fi

AC_SUBST(EXPAT_INCLUDE)
AC_SUBST(EXPAT_LIB)
AC_SUBST(EXPAT_SUBDIR)
AC_SUBST(LIBEXPAT)


dnl Check for zlib 

have_zlib=no
AC_CHECK_LIB(z, compress, have_zlib=yes)
if test x$have_zlib = xno; then
    AC_MSG_ERROR([*** Unable to find zlib library (http://www.info-zip.org/pub/infozip/zlib/)])
fi

dnl Check for other files
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(hash_map ext/hash_map)

dnl Check for --enable-rtti flag

AC_ARG_ENABLE(rtti,
	[  --enable-rtti           compile with or without runtime type information],
	rtti=$enable_rtti
)
AC_MSG_CHECKING([for rtti])
if test "x$rtti" = xno; then
	RTTI_FLAGS="-fno-rtti"
	AC_MSG_RESULT([compile with -fno-rtti])
else
	RTTI_FLAGS=""
	AC_DEFINE(RTTI_ENABLED)
	AC_MSG_RESULT([compile with default rtti (no flags)])
fi


dnl Check for --enable-exceptions flag

AC_ARG_ENABLE(exceptions,
	[  --enable-exceptions     compile with exception handling],
	exceptions=$enable_exceptions
)
AC_MSG_CHECKING([for exceptions])
if test "$STL_CFLAGS" != ""; then
  AC_MSG_RESULT([using stlport, exceptions required])
  AC_DEFINE(EXCEPTIONS_ENABLED)
elif test "x$mpatrol" = xyes; then
  AC_MSG_RESULT([using mpatrol, exceptions required])
  AC_DEFINE(EXCEPTIONS_ENABLED)
else
  if test "x$exceptions" = xyes; then
  	EXCEPTIONS_FLAGS=""
  	AC_MSG_RESULT([compile with default exceptions (no flags)])
	AC_DEFINE(EXCEPTIONS_ENABLED)
  else
  	EXCEPTIONS_FLAGS="-fno-exceptions"
  	AC_MSG_RESULT([compile with -fno-exceptions])
  fi
fi  

dnl Check for --enable-debug flag

AC_ARG_ENABLE(debug,
	[  --enable-debug	  compile without optimizations, and more run-time verbosity],
	debug=$enable_debug
)
AC_MSG_CHECKING([for debugging])
if test "x$debug" = xyes; then
	CFLAGS="$CFLAGS -DDEBUG"
	AC_MSG_RESULT([debug flag given])
else
    AC_MSG_RESULT([no debugging])
fi


dnl Check for --with-themedir

AC_ARG_WITH(themedir,[  --with-themedir=DIR     ParaGUI theme files are in DIR],
            PARAGUI_THEMEDIR="$withval", PARAGUI_THEMEDIR=$prefix/share/paragui)

if test "$PARAGUI_THEMEDIR" = "NONE/share/paragui"; then
	PARAGUI_THEMEDIR=$SDL_PREFIX/share/paragui
fi
AC_DEFINE_UNQUOTED(PARAGUI_THEMEDIR, "$PARAGUI_THEMEDIR")


dnl Check for SDL_image

have_SDL_image=no
AC_CHECK_LIB(SDL_image, IMG_Load, have_SDL_image=yes, have_SDL_image=no)
if test x$have_SDL_image = xno; then
    AC_MSG_RESULT([disable SDL_image support])
else

    sdlimage=yes
    AC_ARG_ENABLE(sdlimage,
    	[  --disable-sdlimage      disable SDL_image support ],
    	sdlimage=no
    )
    
    AC_MSG_CHECKING([for SDL_image support])
    if test "x$sdlimage" = xno; then
	have_SDL_image=no
    	AC_MSG_RESULT([disable SDL_image support])
    else
	have_SDL_image=yes
	AC_DEFINE(HAVE_SDLIMAGE)
    	AC_MSG_RESULT([compile with SDL_image support])
    fi

fi

if test "x$have_SDL_image" = xyes; then
    IMAGE_LIBS="-lSDL_image"
    IMAGE_INCLUDE="$IMAGE_INCLUDE"
else
    IMAGE_LIBS=""
fi

dnl Check for --enable-python flag

BINDINGS=""
SWIG=""

AC_ARG_ENABLE(python,
	[  --enable-python         compile with python support],
	python=$enable_python
)
if test "x$python" = xyes; then
    AC_PATH_PROG(SWIG, swig, no)
    if test "x$SWIG" = xno; then
	AC_MSG_ERROR([*** Unable to find swig! (www.swig.org) ***])
    fi

    AC_PATH_PROG(PYTHON, python, no)
    if test "x$PYTHON" = xno; then
	AC_MSG_ERROR([*** Unable to find python interpreter! ***])
    fi

    dnl Check for Python.h                                                                                   
                                                                                                         
    PYTHON_INCLUDE_DIR=""                                                                                    
    PYTHON_LIB_DIR=""                                                                                        
    have_python_include=no                                                                                   
                                                                                                         
    AC_CHECK_HEADER(python2.2/Python.h, [have_python_include=yes])                                           
    PYTHON_INCLUDE_DIR=$prefix/include/python2.2                                                             
    PYTHON_LIB_DIR=$libdir/python2.2                                                                         
                                                                                                         
    if test x$have_python_include = xno; then                                                                
        AC_CHECK_HEADER(python2.1/Python.h, [have_python_include=yes])                                       
	PYTHON_INCLUDE_DIR=$prefix/include/python2.1                                                         
	PYTHON_LIB_DIR=$libdir/python2.1                                                                     
    fi                                                                                                       
	                                                                                                             
    if test x$have_python_include = xno; then                                                                
        AC_CHECK_HEADER(python2.0/Python.h, [have_python_include=yes])                                      
        PYTHON_INCLUDE_DIR=$prefix/include/python2.0                                                         
        PYTHON_LIB_DIR=$libdir/python2.0                                                                     
    fi                                                                                                       
			                                                                                                         
    if test x$have_python_include = xno; then                                                                
        AC_MSG_ERROR([*** Python.h not found!])                                                                
    fi                                                                                                       
			                                                                                                             
    AC_SUBST(PYTHON_INCLUDE_DIR)                                                                             
    AC_SUBST(PYTHON_LIB_DIR) 

    BINDINGS="python"
fi

AC_SUBST(BINDINGS)
AC_SUBST(SWIG)

AC_SUBST(IMAGE_LIBS)
AC_SUBST(IMAGE_INCLUDE)
AC_SUBST(SYSTEM_LIBS)

OLDLIBS="$LIBS"
LIBS=""
# Grab all extra libs from SDL_CONFIG to build the static lib list.
# Unfortunately libs like jpeg and png will be missing still so we check
# for those manually.
dnl if test "$SDL_CONFIG" != ""; then
dnl    SYSTEM_LIBS=`$SDL_CONFIG --static-libs | sed s:"$($SDL_CONFIG --libs)"::`
dnl fi
AC_CHECK_LIB(jpeg,jpeg_read_header)
AC_CHECK_LIB(tiff,TIFFClose)
AC_CHECK_LIB(png,png_create_read_struct)
dnl SYSTEM_LIBS="$SYSTEM_LIBS $LIBS -lz"
dnl LIBS="$OLDLIBS"

AC_CHECK_FUNCS(vsnprintf)
AC_CHECK_FUNCS(strtok)
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(fnmatch)

PARAGUI_CFLAGS="$STL_CFLAGS $FREETYPE_CFLAGS $SDL_CFLAGS $RTTI_FLAGS $EXTRA_FLAGS"
PARAGUI_LIBS="-lparagui $SDL_LIBS -lz $IMAGE_LIBS $LIBEXPAT $FREETYPE_LIBS $EXTRA_LIBS $LIBSTDCPP"

CXXFLAGS="$STLPORT_FLAGS $CFLAGS $IMAGE_INCLUDE $RTTI_FLAGS $EXCEPTIONS_FLAGS -I$prefix/include"

AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)

AC_SUBST(PARAGUI_CFLAGS)
AC_SUBST(PARAGUI_LIBS)

# lookup the root directory for building RPM's
if test [ -d /usr/src/redhat ]; then
    RPM_ROOT=/usr/src/redhat/SOURCES
fi

if test [ -d /usr/src/RPM ]; then
    RPM_ROOT=/usr/src/RPM/SOURCES
fi

AC_SUBST(RPM_ROOT)

# Finally create all the generated files
AC_OUTPUT([
Makefile
doc/Makefile
include/Makefile
src/Makefile
src/physfs/Makefile
src/physfs/archivers/Makefile
src/physfs/platform/Makefile
src/expat/Makefile
src/draw/Makefile
src/font/Makefile
src/themes/Makefile
src/core/Makefile
src/widgets/Makefile
data/Makefile
bindings/Makefile
bindings/python/Makefile
paragui.spec
paragui-config
paragui.pc
], [chmod +x paragui-config])
